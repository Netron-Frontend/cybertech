/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, '__esModule', { value: true });

const {
	PrismaClientKnownRequestError,
	PrismaClientUnknownRequestError,
	PrismaClientRustPanicError,
	PrismaClientInitializationError,
	PrismaClientValidationError,
	getPrismaClient,
	sqltag,
	empty,
	join,
	raw,
	skip,
	Decimal,
	Debug,
	objectEnumValues,
	makeStrictEnum,
	Extensions,
	warnOnce,
	defineDmmfProperty,
	Public,
	getRuntime,
	createParam
} = require('./runtime/wasm-engine-edge.js');

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
	client: '6.16.1',
	engine: '1c57fdcd7e44b29b9313256c76699e91c3ac3c43'
};

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = Extensions.getExtensionContext;
Prisma.defineExtension = Extensions.defineExtension;

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
	DbNull: objectEnumValues.classes.DbNull,
	JsonNull: objectEnumValues.classes.JsonNull,
	AnyNull: objectEnumValues.classes.AnyNull
};

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
	ReadUncommitted: 'ReadUncommitted',
	ReadCommitted: 'ReadCommitted',
	RepeatableRead: 'RepeatableRead',
	Serializable: 'Serializable'
});

exports.Prisma.FormBookingScalarFieldEnum = {
	id: 'id',
	name: 'name',
	date: 'date',
	time: 'time',
	guestsCount: 'guestsCount',
	phoneNumber: 'phoneNumber',
	notes: 'notes',
	status: 'status',
	createdAt: 'createdAt',
	updatedAt: 'updatedAt',
	userId: 'userId',
	tableId: 'tableId'
};

exports.Prisma.UserScalarFieldEnum = {
	id: 'id',
	email: 'email',
	password: 'password',
	name: 'name',
	role: 'role',
	createdAt: 'createdAt',
	updatedAt: 'updatedAt'
};

exports.Prisma.TableScalarFieldEnum = {
	id: 'id',
	tableNumber: 'tableNumber',
	capacity: 'capacity',
	location: 'location',
	isAvailable: 'isAvailable'
};

exports.Prisma.SortOrder = {
	asc: 'asc',
	desc: 'desc'
};

exports.Prisma.QueryMode = {
	default: 'default',
	insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
	first: 'first',
	last: 'last'
};
exports.FormBookingStatus = exports.$Enums.FormBookingStatus = {
	PENDING: 'PENDING',
	CONFIRMED: 'CONFIRMED',
	CANCELLED: 'CANCELLED',
	COMPLETED: 'COMPLETED'
};

exports.UserRole = exports.$Enums.UserRole = {
	ADMIN: 'ADMIN',
	MANAGER: 'MANAGER'
};

exports.Prisma.ModelName = {
	FormBooking: 'FormBooking',
	User: 'User',
	Table: 'Table'
};
/**
 * Create the Client
 */
const config = {
	generator: {
		name: 'client',
		provider: {
			fromEnvVar: null,
			value: 'prisma-client-js'
		},
		output: {
			value: 'D:\\My own\\Уроки frontend\\NextJS\\cybertech\\generated\\prisma',
			fromEnvVar: null
		},
		config: {
			engineType: 'library'
		},
		binaryTargets: [
			{
				fromEnvVar: null,
				value: 'windows',
				native: true
			}
		],
		previewFeatures: [],
		sourceFilePath: 'D:\\My own\\Уроки frontend\\NextJS\\cybertech\\prisma\\schema.prisma',
		isCustomOutput: true
	},
	relativeEnvPaths: {
		rootEnvPath: null,
		schemaEnvPath: '../../.env'
	},
	relativePath: '../../prisma',
	clientVersion: '6.16.1',
	engineVersion: '1c57fdcd7e44b29b9313256c76699e91c3ac3c43',
	datasourceNames: ['db'],
	activeProvider: 'postgresql',
	postinstall: false,
	inlineDatasources: {
		db: {
			url: {
				fromEnvVar: 'DATABASE_URL',
				value: null
			}
		}
	},
	inlineSchema:
		'generator client {\n  provider = "prisma-client-js"\n  output   = "../generated/prisma"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\nmodel FormBooking {\n  id          String            @id @default(cuid())\n  name        String // Имя клиента\n  date        DateTime // Дата бронирования\n  time        String // Время бронирования\n  guestsCount Int               @default(2) // Количество гостей\n  phoneNumber String // Номер телефона\n  notes       String? // Пожелания/комментарии\n  status      FormBookingStatus @default(PENDING) // Статус бронирования\n  createdAt   DateTime          @default(now())\n  updatedAt   DateTime          @updatedAt\n\n  // Связи\n  userId  String? // ID администратора\n  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)\n  tableId String? // ID стола/места\n  table   Table?  @relation(fields: [tableId], references: [id], onDelete: SetNull)\n}\n\nmodel User {\n  id        String   @id @default(cuid())\n  email     String   @unique\n  password  String // Хэшированный пароль\n  name      String\n  role      UserRole @default(MANAGER)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Связи\n  bookings FormBooking[]\n}\n\nmodel Table {\n  id          String  @id @default(cuid())\n  tableNumber Int     @unique // Номер стола\n  capacity    Int // Вместимость\n  location    String? // Расположение\n  isAvailable Boolean @default(true)\n\n  // Связи\n  bookings FormBooking[]\n}\n\n// Enums\nenum FormBookingStatus {\n  PENDING\n  CONFIRMED\n  CANCELLED\n  COMPLETED\n}\n\nenum UserRole {\n  ADMIN\n  MANAGER\n}\n',
	inlineSchemaHash: '91dabc16ea6e3b85312aad258ec9e9172cb7a97ec91390702e0fbf6d9271c764',
	copyEngine: true
};
config.dirname = '/';

config.runtimeDataModel = JSON.parse(
	'{"models":{"FormBooking":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"date","kind":"scalar","type":"DateTime"},{"name":"time","kind":"scalar","type":"String"},{"name":"guestsCount","kind":"scalar","type":"Int"},{"name":"phoneNumber","kind":"scalar","type":"String"},{"name":"notes","kind":"scalar","type":"String"},{"name":"status","kind":"enum","type":"FormBookingStatus"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"FormBookingToUser"},{"name":"tableId","kind":"scalar","type":"String"},{"name":"table","kind":"object","type":"Table","relationName":"FormBookingToTable"}],"dbName":null},"User":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"password","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"role","kind":"enum","type":"UserRole"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"bookings","kind":"object","type":"FormBooking","relationName":"FormBookingToUser"}],"dbName":null},"Table":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"tableNumber","kind":"scalar","type":"Int"},{"name":"capacity","kind":"scalar","type":"Int"},{"name":"location","kind":"scalar","type":"String"},{"name":"isAvailable","kind":"scalar","type":"Boolean"},{"name":"bookings","kind":"object","type":"FormBooking","relationName":"FormBookingToTable"}],"dbName":null}},"enums":{},"types":{}}'
);
defineDmmfProperty(exports.Prisma, config.runtimeDataModel);
config.engineWasm = {
	getRuntime: async () => require('./query_engine_bg.js'),
	getQueryEngineWasmModule: async () => {
		const loader = (await import('#wasm-engine-loader')).default;
		const engine = (await loader).default;
		return engine;
	}
};
config.compilerWasm = undefined;

config.injectableEdgeEnv = () => ({
	parsed: {
		DATABASE_URL: (typeof globalThis !== 'undefined' && globalThis['DATABASE_URL']) || (typeof process !== 'undefined' && process.env && process.env.DATABASE_URL) || undefined
	}
});

if ((typeof globalThis !== 'undefined' && globalThis['DEBUG']) || (typeof process !== 'undefined' && process.env && process.env.DEBUG) || undefined) {
	Debug.enable((typeof globalThis !== 'undefined' && globalThis['DEBUG']) || (typeof process !== 'undefined' && process.env && process.env.DEBUG) || undefined);
}

const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
